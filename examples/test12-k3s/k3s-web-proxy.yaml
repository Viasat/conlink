apiVersion: v1
kind: Namespace
metadata:
  name: nettest
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-proxy-nginx
  namespace: nettest
data:
  nginx.conf: |
    events {}
    http {
      # Structured access log to stdout so you can `kubectl logs -f`
      log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
                      'upstream=$upstream_addr upstream_status=$upstream_status '
                      'rt=$request_time urt=$upstream_response_time';
      access_log /dev/stdout main;
      error_log  /dev/stderr warn;

      server {
        listen 80;
        location / {
          proxy_pass http://10.200.0.11:8080;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_connect_timeout 2s;
          proxy_read_timeout 10s;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-proxy
  namespace: nettest
spec:
  replicas: 1                   # start with 1 for easier tracing
  selector:
    matchLabels: { app: web-proxy }
  template:
    metadata:
      labels: { app: web-proxy }
    spec:
      containers:
        - name: nginx
          image: nginx:1.27-alpine
          ports: [ { containerPort: 80, name: http } ]
          volumeMounts:
            - name: cfg
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
          readinessProbe:
            httpGet: { path: /, port: http }
            initialDelaySeconds: 2
            periodSeconds: 3
          livenessProbe:
            httpGet: { path: /, port: http }
            initialDelaySeconds: 5
            periodSeconds: 10
      volumes:
        - name: cfg
          configMap: { name: web-proxy-nginx }
---
apiVersion: v1
kind: Service
metadata:
  name: web-proxy
  namespace: nettest
spec:
  selector: { app: web-proxy }
  ports:
    - name: http
      port: 80
      targetPort: http
  type: ClusterIP

